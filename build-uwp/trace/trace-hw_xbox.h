/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_XBOX_GENERATED_TRACERS_H
#define TRACE_HW_XBOX_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_NVNET_MII_READ_EVENT;
extern TraceEvent _TRACE_NVNET_MII_WRITE_EVENT;
extern TraceEvent _TRACE_NVNET_REG_READ_EVENT;
extern TraceEvent _TRACE_NVNET_REG_WRITE_EVENT;
extern TraceEvent _TRACE_NVNET_IO_READ_EVENT;
extern TraceEvent _TRACE_NVNET_IO_WRITE_EVENT;
extern TraceEvent _TRACE_NVNET_RX_FILTER_BCAST_MATCH_EVENT;
extern TraceEvent _TRACE_NVNET_RX_FILTER_MCAST_MATCH_EVENT;
extern TraceEvent _TRACE_NVNET_RX_FILTER_MCAST_MISMATCH_EVENT;
extern TraceEvent _TRACE_NVNET_RX_FILTER_UCAST_MATCH_EVENT;
extern TraceEvent _TRACE_NVNET_RX_FILTER_UCAST_MISMATCH_EVENT;
extern TraceEvent _TRACE_NVNET_RX_OVERSIZED_EVENT;
extern TraceEvent _TRACE_NVNET_RX_FILTER_DROPPED_EVENT;
extern uint16_t _TRACE_NVNET_MII_READ_DSTATE;
extern uint16_t _TRACE_NVNET_MII_WRITE_DSTATE;
extern uint16_t _TRACE_NVNET_REG_READ_DSTATE;
extern uint16_t _TRACE_NVNET_REG_WRITE_DSTATE;
extern uint16_t _TRACE_NVNET_IO_READ_DSTATE;
extern uint16_t _TRACE_NVNET_IO_WRITE_DSTATE;
extern uint16_t _TRACE_NVNET_RX_FILTER_BCAST_MATCH_DSTATE;
extern uint16_t _TRACE_NVNET_RX_FILTER_MCAST_MATCH_DSTATE;
extern uint16_t _TRACE_NVNET_RX_FILTER_MCAST_MISMATCH_DSTATE;
extern uint16_t _TRACE_NVNET_RX_FILTER_UCAST_MATCH_DSTATE;
extern uint16_t _TRACE_NVNET_RX_FILTER_UCAST_MISMATCH_DSTATE;
extern uint16_t _TRACE_NVNET_RX_OVERSIZED_DSTATE;
extern uint16_t _TRACE_NVNET_RX_FILTER_DROPPED_DSTATE;
#define TRACE_NVNET_MII_READ_ENABLED 1
#define TRACE_NVNET_MII_WRITE_ENABLED 1
#define TRACE_NVNET_REG_READ_ENABLED 1
#define TRACE_NVNET_REG_WRITE_ENABLED 1
#define TRACE_NVNET_IO_READ_ENABLED 1
#define TRACE_NVNET_IO_WRITE_ENABLED 1
#define TRACE_NVNET_RX_FILTER_BCAST_MATCH_ENABLED 1
#define TRACE_NVNET_RX_FILTER_MCAST_MATCH_ENABLED 1
#define TRACE_NVNET_RX_FILTER_MCAST_MISMATCH_ENABLED 1
#define TRACE_NVNET_RX_FILTER_UCAST_MATCH_ENABLED 1
#define TRACE_NVNET_RX_FILTER_UCAST_MISMATCH_ENABLED 1
#define TRACE_NVNET_RX_OVERSIZED_ENABLED 1
#define TRACE_NVNET_RX_FILTER_DROPPED_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_NVNET_MII_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_MII_READ) || \
    false)

static inline void _nocheck__trace_nvnet_mii_read(unsigned int phy_addr, uint32_t addr, const char * name, uint64_t val)
{
    if (trace_event_get_state(TRACE_NVNET_MII_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_mii_read " "phy %d addr 0x%"PRIx32" %s val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , phy_addr, addr, name, val);
#line 67 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 4 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_mii_read " "phy %d addr 0x%"PRIx32" %s val 0x%"PRIx64 "\n", phy_addr, addr, name, val);
#line 71 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_mii_read(unsigned int phy_addr, uint32_t addr, const char * name, uint64_t val)
{
    if (true) {
        _nocheck__trace_nvnet_mii_read(phy_addr, addr, name, val);
    }
}

#define TRACE_NVNET_MII_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_MII_WRITE) || \
    false)

static inline void _nocheck__trace_nvnet_mii_write(unsigned int phy_addr, uint32_t addr, const char * name, uint64_t val)
{
    if (trace_event_get_state(TRACE_NVNET_MII_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_mii_write " "phy %d addr 0x%"PRIx32" %s val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , phy_addr, addr, name, val);
#line 98 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 5 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_mii_write " "phy %d addr 0x%"PRIx32" %s val 0x%"PRIx64 "\n", phy_addr, addr, name, val);
#line 102 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_mii_write(unsigned int phy_addr, uint32_t addr, const char * name, uint64_t val)
{
    if (true) {
        _nocheck__trace_nvnet_mii_write(phy_addr, addr, name, val);
    }
}

#define TRACE_NVNET_REG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_REG_READ) || \
    false)

static inline void _nocheck__trace_nvnet_reg_read(uint32_t addr, const char * name, unsigned int size, uint64_t val)
{
    if (trace_event_get_state(TRACE_NVNET_REG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_reg_read " "addr 0x%"PRIx32" %s size %d val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, name, size, val);
#line 129 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 6 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_reg_read " "addr 0x%"PRIx32" %s size %d val 0x%"PRIx64 "\n", addr, name, size, val);
#line 133 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_reg_read(uint32_t addr, const char * name, unsigned int size, uint64_t val)
{
    if (true) {
        _nocheck__trace_nvnet_reg_read(addr, name, size, val);
    }
}

#define TRACE_NVNET_REG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_REG_WRITE) || \
    false)

static inline void _nocheck__trace_nvnet_reg_write(uint32_t addr, const char * name, unsigned int size, uint64_t val)
{
    if (trace_event_get_state(TRACE_NVNET_REG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_reg_write " "addr 0x%"PRIx32" %s size %d val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, name, size, val);
#line 160 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 7 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_reg_write " "addr 0x%"PRIx32" %s size %d val 0x%"PRIx64 "\n", addr, name, size, val);
#line 164 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_reg_write(uint32_t addr, const char * name, unsigned int size, uint64_t val)
{
    if (true) {
        _nocheck__trace_nvnet_reg_write(addr, name, size, val);
    }
}

#define TRACE_NVNET_IO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_IO_READ) || \
    false)

static inline void _nocheck__trace_nvnet_io_read(uint32_t addr, unsigned int size, uint64_t val)
{
    if (trace_event_get_state(TRACE_NVNET_IO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_io_read " "addr 0x%"PRIx32" size %d val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, val);
#line 191 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 8 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_io_read " "addr 0x%"PRIx32" size %d val 0x%"PRIx64 "\n", addr, size, val);
#line 195 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_io_read(uint32_t addr, unsigned int size, uint64_t val)
{
    if (true) {
        _nocheck__trace_nvnet_io_read(addr, size, val);
    }
}

#define TRACE_NVNET_IO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_IO_WRITE) || \
    false)

static inline void _nocheck__trace_nvnet_io_write(uint32_t addr, unsigned int size, uint64_t val)
{
    if (trace_event_get_state(TRACE_NVNET_IO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_io_write " "addr 0x%"PRIx32" size %d val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, val);
#line 222 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 9 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_io_write " "addr 0x%"PRIx32" size %d val 0x%"PRIx64 "\n", addr, size, val);
#line 226 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_io_write(uint32_t addr, unsigned int size, uint64_t val)
{
    if (true) {
        _nocheck__trace_nvnet_io_write(addr, size, val);
    }
}

#define TRACE_NVNET_RX_FILTER_BCAST_MATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_RX_FILTER_BCAST_MATCH) || \
    false)

static inline void _nocheck__trace_nvnet_rx_filter_bcast_match(void)
{
    if (trace_event_get_state(TRACE_NVNET_RX_FILTER_BCAST_MATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_rx_filter_bcast_match " "broadcast match" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 253 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 10 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_rx_filter_bcast_match " "broadcast match" "\n");
#line 257 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_rx_filter_bcast_match(void)
{
    if (true) {
        _nocheck__trace_nvnet_rx_filter_bcast_match();
    }
}

#define TRACE_NVNET_RX_FILTER_MCAST_MATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_RX_FILTER_MCAST_MATCH) || \
    false)

static inline void _nocheck__trace_nvnet_rx_filter_mcast_match(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5)
{
    if (trace_event_get_state(TRACE_NVNET_RX_FILTER_MCAST_MATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_rx_filter_mcast_match " "multicast match: %02x:%02x:%02x:%02x:%02x:%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , b0, b1, b2, b3, b4, b5);
#line 284 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 11 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_rx_filter_mcast_match " "multicast match: %02x:%02x:%02x:%02x:%02x:%02x" "\n", b0, b1, b2, b3, b4, b5);
#line 288 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_rx_filter_mcast_match(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5)
{
    if (true) {
        _nocheck__trace_nvnet_rx_filter_mcast_match(b0, b1, b2, b3, b4, b5);
    }
}

#define TRACE_NVNET_RX_FILTER_MCAST_MISMATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_RX_FILTER_MCAST_MISMATCH) || \
    false)

static inline void _nocheck__trace_nvnet_rx_filter_mcast_mismatch(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5)
{
    if (trace_event_get_state(TRACE_NVNET_RX_FILTER_MCAST_MISMATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_rx_filter_mcast_mismatch " "multicast mismatch: %02x:%02x:%02x:%02x:%02x:%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , b0, b1, b2, b3, b4, b5);
#line 315 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 12 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_rx_filter_mcast_mismatch " "multicast mismatch: %02x:%02x:%02x:%02x:%02x:%02x" "\n", b0, b1, b2, b3, b4, b5);
#line 319 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_rx_filter_mcast_mismatch(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5)
{
    if (true) {
        _nocheck__trace_nvnet_rx_filter_mcast_mismatch(b0, b1, b2, b3, b4, b5);
    }
}

#define TRACE_NVNET_RX_FILTER_UCAST_MATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_RX_FILTER_UCAST_MATCH) || \
    false)

static inline void _nocheck__trace_nvnet_rx_filter_ucast_match(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5)
{
    if (trace_event_get_state(TRACE_NVNET_RX_FILTER_UCAST_MATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_rx_filter_ucast_match " "unicast match: %02x:%02x:%02x:%02x:%02x:%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , b0, b1, b2, b3, b4, b5);
#line 346 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 13 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_rx_filter_ucast_match " "unicast match: %02x:%02x:%02x:%02x:%02x:%02x" "\n", b0, b1, b2, b3, b4, b5);
#line 350 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_rx_filter_ucast_match(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5)
{
    if (true) {
        _nocheck__trace_nvnet_rx_filter_ucast_match(b0, b1, b2, b3, b4, b5);
    }
}

#define TRACE_NVNET_RX_FILTER_UCAST_MISMATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_RX_FILTER_UCAST_MISMATCH) || \
    false)

static inline void _nocheck__trace_nvnet_rx_filter_ucast_mismatch(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5)
{
    if (trace_event_get_state(TRACE_NVNET_RX_FILTER_UCAST_MISMATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_rx_filter_ucast_mismatch " "unicast mismatch: %02x:%02x:%02x:%02x:%02x:%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , b0, b1, b2, b3, b4, b5);
#line 377 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 14 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_rx_filter_ucast_mismatch " "unicast mismatch: %02x:%02x:%02x:%02x:%02x:%02x" "\n", b0, b1, b2, b3, b4, b5);
#line 381 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_rx_filter_ucast_mismatch(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5)
{
    if (true) {
        _nocheck__trace_nvnet_rx_filter_ucast_mismatch(b0, b1, b2, b3, b4, b5);
    }
}

#define TRACE_NVNET_RX_OVERSIZED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_RX_OVERSIZED) || \
    false)

static inline void _nocheck__trace_nvnet_rx_oversized(size_t size)
{
    if (trace_event_get_state(TRACE_NVNET_RX_OVERSIZED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_rx_oversized " "Received packet dropped because it was oversized (%zu bytes)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , size);
#line 408 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 15 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_rx_oversized " "Received packet dropped because it was oversized (%zu bytes)" "\n", size);
#line 412 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_rx_oversized(size_t size)
{
    if (true) {
        _nocheck__trace_nvnet_rx_oversized(size);
    }
}

#define TRACE_NVNET_RX_FILTER_DROPPED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVNET_RX_FILTER_DROPPED) || \
    false)

static inline void _nocheck__trace_nvnet_rx_filter_dropped(void)
{
    if (trace_event_get_state(TRACE_NVNET_RX_FILTER_DROPPED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("%d@%zu.%06zu:nvnet_rx_filter_dropped " "Received packet dropped by RX filter" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 439 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        } else {
#line 16 "C:/Users/seski/source/repos/xemu-uwp/hw/xbox/trace-events"
            qemu_log("nvnet_rx_filter_dropped " "Received packet dropped by RX filter" "\n");
#line 443 "C:/Users/seski/source/repos/xemu-uwp/build/trace/trace-hw_xbox.h"
        }
    }
}

static inline void trace_nvnet_rx_filter_dropped(void)
{
    if (true) {
        _nocheck__trace_nvnet_rx_filter_dropped();
    }
}
#endif /* TRACE_HW_XBOX_GENERATED_TRACERS_H */
